import org.apache.http.HttpEntity
import org.apache.http.client.methods.CloseableHttpResponse
import org.apache.http.client.methods.HttpPost
import org.apache.http.entity.ContentType
import org.apache.http.entity.mime.MultipartEntityBuilder
import org.apache.http.impl.client.CloseableHttpClient
import org.apache.http.impl.client.HttpClients

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = "https://repo.spongepowered.org/maven" }
        maven { url = "https://plugins.gradle.org/m2/" }
        maven { url = "https://maven.parchmentmc.org" }
        mavenCentral()
    }
    dependencies {
        classpath "org.apache.httpcomponents:httpmime:4.5.14"
        classpath "org.parchmentmc:librarian:1.+"
    }
}
plugins {
    id "com.modrinth.minotaur" version "2.+"
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id 'earth.terrarium.cloche' version '[0.9.0,0.10.0)'
    id 'com.gradleup.shadow' version '8.3.5'
}

apply plugin: "java"
apply plugin: 'eclipse'
apply plugin: 'maven-publish'


apply from: rootProject.file('env-variables.gradle')
apply from: rootProject.file('changelog-util.gradle')

println "Branch ${branch}${shaRef} isRelease: '${isRelease}'"

var mc_version = "1.21.4"
var neo_version = "21.4.123"

archivesBaseName = "Advanced-Portals-${mc_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(21)


repositories {
    mavenLocal()
    // Temp till cloche is fixed
    maven {url = "https://maven.neoforged.net/mojang-meta" }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    mavenCentral()

    cloche {
        librariesMinecraft()
        main()

        mavenFabric()
        mavenNeoforged()
    }
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

def guice_version = findProperty("guice_version")
def gson_version = findProperty("gson_version")
def snakeyaml_version = findProperty("snakeyaml_version")
def guava_version = findProperty("guava_version")

// https://github.com/terrarium-earth/cloche
cloche {
    minecraftVersion = mc_version

    metadata {
        modId = project.modid
        name = project.mod_name
        license = project.mod_license
        description = project.mod_description
        author = project.author
        icon = "logo.png"
        url = project.website
    }

    singleTarget {
        neoforge {
            loaderVersion = neo_version

            include("com.google.inject:guice:${guice_version}")
            include("com.google.code.gson:gson:${gson_version}")
            include("org.yaml:snakeyaml:${snakeyaml_version}")
            include("com.google.guava:guava:${guava_version}")

            dependencies {
                implementation(project(":core")) {
                    targetConfiguration = "shadow"
                }
                implementation project(':lang')

                implementation("com.google.inject:guice:${guice_version}")
                implementation("com.google.code.gson:gson:${gson_version}")
                implementation("org.yaml:snakeyaml:${snakeyaml_version}")
                implementation("com.google.guava:guava:${guava_version}")
            }

            mixins.from("src/neoforge/main/advanced_portals.mixins.json")

            metadata {
                // Find out how to add it under the mods section
                // custom("updateJSONURL", "https://api.modrinth.com/updates/advanced-portals/forge_updates.json")
            }

            runs {
                server()
                client()
                data()
            }
        }
    }
}

def getReleaseChangelog() {
    def changelogFile = rootProject.file('CHANGELOG.md')
    def changelog = "## [${changelogFile.text.split('\n## \\[')[1]}\n\n"// ${project.github}/blob/${branch}/CHANGELOG.md
    return changelog;
}

/**
 * For pre-releases and testers to be able to try the latest commits if they want.
 * If the builds start exceeding 8MB then we may want to upload to s3 instead and periodically clear.
 * TODO possibly add a task that announces when builds are made?
 * Though add a note that it may take a while for Curse to approve the files.
 */
tasks.register('discordupload') {
    dependsOn(jar)
    doLast {
        String discordWebhook = System.getenv("DISCORD_WEBHOOK")

        if (discordWebhook != null) {

            CloseableHttpClient httpClient = HttpClients.createDefault()
            HttpPost uploadFile = new HttpPost(discordWebhook)

            MultipartEntityBuilder builder = MultipartEntityBuilder.create()
            if (!isRelease) {
                builder.addTextBody("content", "New snapshot or testing build")
            } else {
                builder.addTextBody("content", "New release build\n" +
                        "```markdown\n" +
                        "${getReleaseChangelog()}\n" +
                        "```")
            }

            var name = jar.archiveBaseName.get() + "-" + jar.archiveVersion.get() + ".jar"

            builder.addBinaryBody("file", file(jar.archiveFile).newInputStream(), ContentType.APPLICATION_OCTET_STREAM, name)

            HttpEntity multipart = builder.build()

            uploadFile.setEntity(multipart)
            CloseableHttpResponse response = httpClient.execute(uploadFile)
            response.getEntity()

            println("Posted build")

        } else {
            println("Discord webhook unspecified")
        }
    }
}

tasks.curseforge.enabled = System.getenv("CURSE_API") != null

//curseforge {
//    logger.info("Curse api: " + System.getenv("CURSE_API"))
//    if (System.getenv("CURSE_API") != null) {
//        apiKey = System.getenv("CURSE_API")
//    }
//    project {
//        id = project.curse_project_id
//        // TODO add code to reference this but also cut the latest change logs in for the files
//        changelog = getReleaseChangelog()
//        changelogType = 'markdown'
//        releaseType = 'release'
//        addGameVersion '1.20'
//        addGameVersion '1.20.1'
//
//        mainArtifact(jar){
//
//        }
//        addArtifact srcJar
//        addArtifact deobfJar
//    }
//}

// https://github.com/modrinth/minotaur
modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = project.modrinth_slug
    versionType = "release"
    uploadFile = jar
    gameVersions = ["1.20", "1.20.1"]
    changelog = getReleaseChangelog()
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

