// Pulled from https://github.com/sekwah41/Naruto-Mod/blob/v1.3.0/build.gradle
// TODO decide what needs to be removed and kept

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = "https://repo.spongepowered.org/maven" }
        //maven { url = 'https://sizableshrimp.me/maven' }
        maven { url = "https://plugins.gradle.org/m2/" }
        maven { url = "https://maven.parchmentmc.org" }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '6.0.+', changing: true
        //classpath "org.spongepowered:mixingradle:0.7+"
        classpath "org.apache.httpcomponents:httpmime:4.5.13"
        classpath "org.parchmentmc:librarian:1.+"
    }
}
plugins {
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: "java"
apply plugin: 'eclipse'
//apply plugin: 'maven-publish'

// May be able to remove it
//apply plugin: "org.spongepowered.mixin"

apply from: rootProject.file('env-variables.gradle')
apply from: rootProject.file('changelog-util.gradle')

apply from: rootProject.file('shadowJar.gradle')

println "Branch ${ext.branch}${ext.shaRef} isRelease: '${ext.isRelease}'"

archivesBaseName = "Advanced-Portals-Forge-1-18"

archivesBaseName = "Advanced-Portals-Forge-1-18"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

configurations {
    libraries

    shade
    implementation.extendsFrom libraries
    runtimeClasspath.extendsFrom localRuntime

    shade
    implementation.extendsFrom shade

}

repositories {
    maven { url "https://repo.maven.apache.org/maven2" }
    maven { url = "https://maven.sekwah.com" }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: '1.18.1'
    //mappings channel: 'parchment', version: '2021.12.19-1.18.1'
    //mappings channel: 'parchment', version: '2021.07.21-1.17'

    // This is for personal local tests i was doing ignore it ;)
    //mappings channel: 'snapshot', version: '20200706-unofficialtest-1.16.1'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            //property 'forge.logging.markers', 'SCAN,REGISTR
            //version=1.2.1ES,REGISTRYDUMP'

            ideaModule "${rootProject.name}.${project.name}.main"

            singleInstance true

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            //property 'mixin.env.remapRefMap', 'true'
            //property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                "${project.modid}" {
                    source sourceSets.main
                    source project(":core").sourceSets.main
                    source project(":core").sourceSets.generatedTemplates
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', ''
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            ideaModule "${rootProject.name}.${project.name}.main"

            singleInstance true

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--nogui'

            mods {
                "${project.modid}" {
                    source sourceSets.main
                    source project(":core").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', ''
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            ideaModule "${rootProject.name}.${project.name}.main"

            singleInstance true

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', project.modid, '--all', '--output', file('src/generated/resources/')

            mods {
                "${project.modid}" {
                    source sourceSets.main
                }
            }
        }
    }
}

jarJar.enable()

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            mod_version: getVersion(),
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {

    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.18.2-40.3.1'

    implementation 'org.spongepowered:mixin:0.8.5'
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    // Copy this from core
    implementation jarJar(group: 'com.google.code.gson', name: 'gson', version: '[2.8.9,)')
    implementation jarJar(group: 'com.google.inject', name: 'guice', version: '[5.0.1,)')
    implementation jarJar(group: 'org.yaml', name: 'snakeyaml', version: '[2.2,)')
    implementation jarJar(group: 'com.google.guava', name: 'guava', version: '[33.2.0-jre,)')

    //includeLibs project(':bungee')
    //includeLibs project(':velocity')

}

/*mixin {
    add sourceSets.main, "mixins.${project.modid}.refmap.json"

    debug.verbose = true
    debug.export = true
}*/

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    archiveClassifier = 'slim'
    finalizedBy 'reobfJar'
    manifest {
        attributes([
                "Specification-Title": project.modid,
                "Specification-Vendor": project.author,
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": "${getVersion()}",
                "Implementation-Vendor" :project.author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                //"MixinConfigs": "mixins.${project.modid}.json"
        ])
    }
}

configurations {
    shade
}

assemble.dependsOn shadowJar

shadowJar {
    configurations = [project.configurations.shade]
    mergeServiceFiles()
}

reobf {
    shadowJar {}
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir '../core/src/main/java'
            srcDir '../core/build/generated/templates'
        }
        resources {
            srcDir 'src/main/resources'
            srcDir '../core/src/main/resources'
        }
    }
}


tasks.curseforge.enabled = System.getenv("CURSE_API") != null

apply from: '../discord.gradle'

tasks.named('compileJava') {
    dependsOn ':core:generateTemplates'
    dependsOn ':core:classes'
}


idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

